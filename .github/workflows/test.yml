name: Build and Test
on:
  pull_request:
  push:
jobs:

  build-and-test:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow-fail }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11]
        py: [310] # [310, 311] Python version injection currently missing from flake
        allow-fail: [false]

        # include:

        #   # Uncomment when upcoming Python broken
        #   - os: ubuntu-20.04
        #     py: 311
        #     allow-fail: true

        #   - os: macos-11
        #     py: 311
        #     allow-fail: true

    steps:
      - uses: actions/checkout@v3.2.0
      - uses: cachix/install-nix-action@v18
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: cachix/cachix-action@v12
        with:
          name: rustpetalo # The name of the Cachix cache
          # If you chose signing key for write access
          #signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_JACG_RUSTPETALO }}'

      - name: Nix build
        run: |
          nix build -L
          result/bin/mlem -h
          result/bin/foms -h
          result/bin/imageprimaries -h
          result/bin/joinlorhdf -h
          result/bin/make_sensitivity_image -h
          result/bin/makelor -h
          result/bin/vislor -h
          result/bin/viewraw.py -h
          # result/bin/foms.py -h    TODO

      - name: Nix shell
        run: |
          nix shell -c mlem -h
          nix shell -c foms -h
          nix shell -c imageprimaries -h
          nix shell -c joinlorhdf -h
          nix shell -c make_sensitivity_image -h
          nix shell -c makelor -h
          nix shell -c vislor -h
          nix shell -c viewraw.py -h
          # nix shell -c foms.py -h    TODO

      - name: Test Pure Rust in development environment
        run: nix develop -c just test-rust-pure --color=always
        if: runner.os != 'Linux'

      - name: Test Pure Python in development environment
        run: nix develop -c just test-python-pure --color=yes

      - name: Compile PyO3 in development environment
        run: nix develop -c just python-build-bindings
        if: runner.os != 'Darwin'

      - name: Test PyO3 in development environment
        run: nix develop -c just test-python-bindings --color=yes
        if: runner.os != 'Darwin'
